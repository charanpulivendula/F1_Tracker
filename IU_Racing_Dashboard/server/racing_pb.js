// source: racing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.RacecarData', null, global);
goog.exportSymbol('proto.RacecarData.Brake', null, global);
goog.exportSymbol('proto.RacecarData.BrakePressure', null, global);
goog.exportSymbol('proto.RacecarData.Errors', null, global);
goog.exportSymbol('proto.RacecarData.Gear', null, global);
goog.exportSymbol('proto.RacecarData.Location', null, global);
goog.exportSymbol('proto.RacecarData.Planning_Points', null, global);
goog.exportSymbol('proto.RacecarData.Speed', null, global);
goog.exportSymbol('proto.RacecarData.Steering', null, global);
goog.exportSymbol('proto.RacecarData.Throttle', null, global);
goog.exportSymbol('proto.RacecarData.Tire', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.displayName = 'proto.RacecarData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Speed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Speed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Speed.displayName = 'proto.RacecarData.Speed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Tire = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Tire, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Tire.displayName = 'proto.RacecarData.Tire';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Location.displayName = 'proto.RacecarData.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.BrakePressure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.BrakePressure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.BrakePressure.displayName = 'proto.RacecarData.BrakePressure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Throttle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Throttle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Throttle.displayName = 'proto.RacecarData.Throttle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Brake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Brake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Brake.displayName = 'proto.RacecarData.Brake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Gear = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Gear, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Gear.displayName = 'proto.RacecarData.Gear';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Steering = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Steering, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Steering.displayName = 'proto.RacecarData.Steering';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Planning_Points = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Planning_Points, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Planning_Points.displayName = 'proto.RacecarData.Planning_Points';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RacecarData.Errors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RacecarData.Errors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RacecarData.Errors.displayName = 'proto.RacecarData.Errors';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.toObject = function(includeInstance, msg) {
  var f, obj = {
    speed: (f = msg.getSpeed()) && proto.RacecarData.Speed.toObject(includeInstance, f),
    tireTemp: (f = msg.getTireTemp()) && proto.RacecarData.Tire.toObject(includeInstance, f),
    throttle: (f = msg.getThrottle()) && proto.RacecarData.Throttle.toObject(includeInstance, f),
    brake: (f = msg.getBrake()) && proto.RacecarData.Brake.toObject(includeInstance, f),
    gear: (f = msg.getGear()) && proto.RacecarData.Gear.toObject(includeInstance, f),
    ctState: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ctStateRollingCounter: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sysState: jspb.Message.getFieldWithDefault(msg, 8, 0),
    system: jspb.Message.getFieldWithDefault(msg, 9, ""),
    engineSpeedRpm: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    steering: (f = msg.getSteering()) && proto.RacecarData.Steering.toObject(includeInstance, f),
    brakePressure: (f = msg.getBrakePressure()) && proto.RacecarData.BrakePressure.toObject(includeInstance, f),
    disconnected: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    points: (f = msg.getPoints()) && proto.RacecarData.Planning_Points.toObject(includeInstance, f),
    trackFlag: jspb.Message.getFieldWithDefault(msg, 15, 0),
    vehFlag: jspb.Message.getFieldWithDefault(msg, 16, 0),
    location: (f = msg.getLocation()) && proto.RacecarData.Location.toObject(includeInstance, f),
    coolantTemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    engineOilPressureKpa: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    lapCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    errors: (f = msg.getErrors()) && proto.RacecarData.Errors.toObject(includeInstance, f),
    laps: jspb.Message.getFieldWithDefault(msg, 22, 0),
    racelineIndex: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData}
 */
proto.RacecarData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData;
  return proto.RacecarData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData}
 */
proto.RacecarData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RacecarData.Speed;
      reader.readMessage(value,proto.RacecarData.Speed.deserializeBinaryFromReader);
      msg.setSpeed(value);
      break;
    case 2:
      var value = new proto.RacecarData.Tire;
      reader.readMessage(value,proto.RacecarData.Tire.deserializeBinaryFromReader);
      msg.setTireTemp(value);
      break;
    case 3:
      var value = new proto.RacecarData.Throttle;
      reader.readMessage(value,proto.RacecarData.Throttle.deserializeBinaryFromReader);
      msg.setThrottle(value);
      break;
    case 4:
      var value = new proto.RacecarData.Brake;
      reader.readMessage(value,proto.RacecarData.Brake.deserializeBinaryFromReader);
      msg.setBrake(value);
      break;
    case 5:
      var value = new proto.RacecarData.Gear;
      reader.readMessage(value,proto.RacecarData.Gear.deserializeBinaryFromReader);
      msg.setGear(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCtState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCtStateRollingCounter(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSysState(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystem(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEngineSpeedRpm(value);
      break;
    case 11:
      var value = new proto.RacecarData.Steering;
      reader.readMessage(value,proto.RacecarData.Steering.deserializeBinaryFromReader);
      msg.setSteering(value);
      break;
    case 12:
      var value = new proto.RacecarData.BrakePressure;
      reader.readMessage(value,proto.RacecarData.BrakePressure.deserializeBinaryFromReader);
      msg.setBrakePressure(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisconnected(value);
      break;
    case 14:
      var value = new proto.RacecarData.Planning_Points;
      reader.readMessage(value,proto.RacecarData.Planning_Points.deserializeBinaryFromReader);
      msg.setPoints(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrackFlag(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVehFlag(value);
      break;
    case 17:
      var value = new proto.RacecarData.Location;
      reader.readMessage(value,proto.RacecarData.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCoolantTemperature(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEngineOilPressureKpa(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLapCount(value);
      break;
    case 21:
      var value = new proto.RacecarData.Errors;
      reader.readMessage(value,proto.RacecarData.Errors.deserializeBinaryFromReader);
      msg.setErrors(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaps(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRacelineIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RacecarData.Speed.serializeBinaryToWriter
    );
  }
  f = message.getTireTemp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RacecarData.Tire.serializeBinaryToWriter
    );
  }
  f = message.getThrottle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RacecarData.Throttle.serializeBinaryToWriter
    );
  }
  f = message.getBrake();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RacecarData.Brake.serializeBinaryToWriter
    );
  }
  f = message.getGear();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.RacecarData.Gear.serializeBinaryToWriter
    );
  }
  f = message.getCtState();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCtStateRollingCounter();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSysState();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSystem();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEngineSpeedRpm();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getSteering();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.RacecarData.Steering.serializeBinaryToWriter
    );
  }
  f = message.getBrakePressure();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.RacecarData.BrakePressure.serializeBinaryToWriter
    );
  }
  f = message.getDisconnected();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getPoints();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.RacecarData.Planning_Points.serializeBinaryToWriter
    );
  }
  f = message.getTrackFlag();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getVehFlag();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.RacecarData.Location.serializeBinaryToWriter
    );
  }
  f = message.getCoolantTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getEngineOilPressureKpa();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getLapCount();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getErrors();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.RacecarData.Errors.serializeBinaryToWriter
    );
  }
  f = message.getLaps();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getRacelineIndex();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Speed.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Speed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Speed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Speed.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicleSpeedKmph: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    roundTargetSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Speed}
 */
proto.RacecarData.Speed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Speed;
  return proto.RacecarData.Speed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Speed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Speed}
 */
proto.RacecarData.Speed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVehicleSpeedKmph(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoundTargetSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Speed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Speed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Speed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Speed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehicleSpeedKmph();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getRoundTargetSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double vehicle_speed_kmph = 1;
 * @return {number}
 */
proto.RacecarData.Speed.prototype.getVehicleSpeedKmph = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Speed} returns this
 */
proto.RacecarData.Speed.prototype.setVehicleSpeedKmph = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double round_target_speed = 2;
 * @return {number}
 */
proto.RacecarData.Speed.prototype.getRoundTargetSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Speed} returns this
 */
proto.RacecarData.Speed.prototype.setRoundTargetSpeed = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Tire.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Tire.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Tire} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Tire.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontRight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    frontLeft: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rearRight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    rearLeft: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Tire}
 */
proto.RacecarData.Tire.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Tire;
  return proto.RacecarData.Tire.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Tire} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Tire}
 */
proto.RacecarData.Tire.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrontRight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrontLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRearRight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRearLeft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Tire.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Tire.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Tire} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Tire.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontRight();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFrontLeft();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRearRight();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRearLeft();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double front_right = 1;
 * @return {number}
 */
proto.RacecarData.Tire.prototype.getFrontRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Tire} returns this
 */
proto.RacecarData.Tire.prototype.setFrontRight = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double front_left = 2;
 * @return {number}
 */
proto.RacecarData.Tire.prototype.getFrontLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Tire} returns this
 */
proto.RacecarData.Tire.prototype.setFrontLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double rear_right = 3;
 * @return {number}
 */
proto.RacecarData.Tire.prototype.getRearRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Tire} returns this
 */
proto.RacecarData.Tire.prototype.setRearRight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double rear_left = 4;
 * @return {number}
 */
proto.RacecarData.Tire.prototype.getRearLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Tire} returns this
 */
proto.RacecarData.Tire.prototype.setRearLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Location}
 */
proto.RacecarData.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Location;
  return proto.RacecarData.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Location}
 */
proto.RacecarData.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.RacecarData.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Location} returns this
 */
proto.RacecarData.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.RacecarData.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Location} returns this
 */
proto.RacecarData.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.BrakePressure.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.BrakePressure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.BrakePressure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.BrakePressure.toObject = function(includeInstance, msg) {
  var f, obj = {
    fBrakePressureCmd: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rBrakePressureCmd: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.BrakePressure}
 */
proto.RacecarData.BrakePressure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.BrakePressure;
  return proto.RacecarData.BrakePressure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.BrakePressure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.BrakePressure}
 */
proto.RacecarData.BrakePressure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFBrakePressureCmd(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRBrakePressureCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.BrakePressure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.BrakePressure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.BrakePressure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.BrakePressure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFBrakePressureCmd();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRBrakePressureCmd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 f_brake_pressure_cmd = 1;
 * @return {number}
 */
proto.RacecarData.BrakePressure.prototype.getFBrakePressureCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.BrakePressure} returns this
 */
proto.RacecarData.BrakePressure.prototype.setFBrakePressureCmd = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 r_brake_pressure_cmd = 2;
 * @return {number}
 */
proto.RacecarData.BrakePressure.prototype.getRBrakePressureCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.BrakePressure} returns this
 */
proto.RacecarData.BrakePressure.prototype.setRBrakePressureCmd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Throttle.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Throttle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Throttle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Throttle.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualThrottle: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    cmdThrottle: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Throttle}
 */
proto.RacecarData.Throttle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Throttle;
  return proto.RacecarData.Throttle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Throttle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Throttle}
 */
proto.RacecarData.Throttle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setActualThrottle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCmdThrottle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Throttle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Throttle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Throttle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Throttle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualThrottle();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCmdThrottle();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double actual_throttle = 1;
 * @return {number}
 */
proto.RacecarData.Throttle.prototype.getActualThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Throttle} returns this
 */
proto.RacecarData.Throttle.prototype.setActualThrottle = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double cmd_throttle = 2;
 * @return {number}
 */
proto.RacecarData.Throttle.prototype.getCmdThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Throttle} returns this
 */
proto.RacecarData.Throttle.prototype.setCmdThrottle = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Brake.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Brake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Brake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Brake.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualBrakeFront: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    actualBrakeRear: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    cmdBrake: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Brake}
 */
proto.RacecarData.Brake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Brake;
  return proto.RacecarData.Brake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Brake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Brake}
 */
proto.RacecarData.Brake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setActualBrakeFront(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setActualBrakeRear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCmdBrake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Brake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Brake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Brake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Brake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualBrakeFront();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getActualBrakeRear();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCmdBrake();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double actual_brake_front = 1;
 * @return {number}
 */
proto.RacecarData.Brake.prototype.getActualBrakeFront = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Brake} returns this
 */
proto.RacecarData.Brake.prototype.setActualBrakeFront = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double actual_brake_rear = 2;
 * @return {number}
 */
proto.RacecarData.Brake.prototype.getActualBrakeRear = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Brake} returns this
 */
proto.RacecarData.Brake.prototype.setActualBrakeRear = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double cmd_brake = 3;
 * @return {number}
 */
proto.RacecarData.Brake.prototype.getCmdBrake = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Brake} returns this
 */
proto.RacecarData.Brake.prototype.setCmdBrake = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Gear.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Gear.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Gear} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Gear.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualGear: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cmdGear: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Gear}
 */
proto.RacecarData.Gear.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Gear;
  return proto.RacecarData.Gear.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Gear} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Gear}
 */
proto.RacecarData.Gear.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActualGear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmdGear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Gear.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Gear.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Gear} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Gear.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualGear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCmdGear();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 actual_gear = 1;
 * @return {number}
 */
proto.RacecarData.Gear.prototype.getActualGear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Gear} returns this
 */
proto.RacecarData.Gear.prototype.setActualGear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 cmd_gear = 2;
 * @return {number}
 */
proto.RacecarData.Gear.prototype.getCmdGear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Gear} returns this
 */
proto.RacecarData.Gear.prototype.setCmdGear = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Steering.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Steering.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Steering} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Steering.toObject = function(includeInstance, msg) {
  var f, obj = {
    actualSteeringDegree: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    cmdSteeringDegree: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Steering}
 */
proto.RacecarData.Steering.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Steering;
  return proto.RacecarData.Steering.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Steering} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Steering}
 */
proto.RacecarData.Steering.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setActualSteeringDegree(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCmdSteeringDegree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Steering.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Steering.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Steering} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Steering.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActualSteeringDegree();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCmdSteeringDegree();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double actual_steering_degree = 1;
 * @return {number}
 */
proto.RacecarData.Steering.prototype.getActualSteeringDegree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Steering} returns this
 */
proto.RacecarData.Steering.prototype.setActualSteeringDegree = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double cmd_steering_degree = 2;
 * @return {number}
 */
proto.RacecarData.Steering.prototype.getCmdSteeringDegree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Steering} returns this
 */
proto.RacecarData.Steering.prototype.setCmdSteeringDegree = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Planning_Points.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Planning_Points.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Planning_Points} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Planning_Points.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Planning_Points}
 */
proto.RacecarData.Planning_Points.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Planning_Points;
  return proto.RacecarData.Planning_Points.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Planning_Points} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Planning_Points}
 */
proto.RacecarData.Planning_Points.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Planning_Points.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Planning_Points.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Planning_Points} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Planning_Points.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.RacecarData.Planning_Points.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Planning_Points} returns this
 */
proto.RacecarData.Planning_Points.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.RacecarData.Planning_Points.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Planning_Points} returns this
 */
proto.RacecarData.Planning_Points.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.RacecarData.Planning_Points.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Planning_Points} returns this
 */
proto.RacecarData.Planning_Points.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RacecarData.Errors.prototype.toObject = function(opt_includeInstance) {
  return proto.RacecarData.Errors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RacecarData.Errors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Errors.toObject = function(includeInstance, msg) {
  var f, obj = {
    headingError: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    crossTrackError: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    velocityError: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RacecarData.Errors}
 */
proto.RacecarData.Errors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RacecarData.Errors;
  return proto.RacecarData.Errors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RacecarData.Errors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RacecarData.Errors}
 */
proto.RacecarData.Errors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCrossTrackError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocityError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RacecarData.Errors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RacecarData.Errors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RacecarData.Errors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RacecarData.Errors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadingError();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCrossTrackError();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getVelocityError();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double heading_error = 1;
 * @return {number}
 */
proto.RacecarData.Errors.prototype.getHeadingError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Errors} returns this
 */
proto.RacecarData.Errors.prototype.setHeadingError = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double cross_track_error = 2;
 * @return {number}
 */
proto.RacecarData.Errors.prototype.getCrossTrackError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Errors} returns this
 */
proto.RacecarData.Errors.prototype.setCrossTrackError = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double velocity_error = 3;
 * @return {number}
 */
proto.RacecarData.Errors.prototype.getVelocityError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData.Errors} returns this
 */
proto.RacecarData.Errors.prototype.setVelocityError = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Speed speed = 1;
 * @return {?proto.RacecarData.Speed}
 */
proto.RacecarData.prototype.getSpeed = function() {
  return /** @type{?proto.RacecarData.Speed} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Speed, 1));
};


/**
 * @param {?proto.RacecarData.Speed|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setSpeed = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearSpeed = function() {
  return this.setSpeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Tire tire_temp = 2;
 * @return {?proto.RacecarData.Tire}
 */
proto.RacecarData.prototype.getTireTemp = function() {
  return /** @type{?proto.RacecarData.Tire} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Tire, 2));
};


/**
 * @param {?proto.RacecarData.Tire|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setTireTemp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearTireTemp = function() {
  return this.setTireTemp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasTireTemp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Throttle throttle = 3;
 * @return {?proto.RacecarData.Throttle}
 */
proto.RacecarData.prototype.getThrottle = function() {
  return /** @type{?proto.RacecarData.Throttle} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Throttle, 3));
};


/**
 * @param {?proto.RacecarData.Throttle|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setThrottle = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearThrottle = function() {
  return this.setThrottle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasThrottle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Brake brake = 4;
 * @return {?proto.RacecarData.Brake}
 */
proto.RacecarData.prototype.getBrake = function() {
  return /** @type{?proto.RacecarData.Brake} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Brake, 4));
};


/**
 * @param {?proto.RacecarData.Brake|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setBrake = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearBrake = function() {
  return this.setBrake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasBrake = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Gear gear = 5;
 * @return {?proto.RacecarData.Gear}
 */
proto.RacecarData.prototype.getGear = function() {
  return /** @type{?proto.RacecarData.Gear} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Gear, 5));
};


/**
 * @param {?proto.RacecarData.Gear|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setGear = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearGear = function() {
  return this.setGear(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasGear = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 ct_state = 6;
 * @return {number}
 */
proto.RacecarData.prototype.getCtState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setCtState = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 ct_state_rolling_counter = 7;
 * @return {number}
 */
proto.RacecarData.prototype.getCtStateRollingCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setCtStateRollingCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 sys_state = 8;
 * @return {number}
 */
proto.RacecarData.prototype.getSysState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setSysState = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string system = 9;
 * @return {string}
 */
proto.RacecarData.prototype.getSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional double engine_speed_rpm = 10;
 * @return {number}
 */
proto.RacecarData.prototype.getEngineSpeedRpm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setEngineSpeedRpm = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional Steering steering = 11;
 * @return {?proto.RacecarData.Steering}
 */
proto.RacecarData.prototype.getSteering = function() {
  return /** @type{?proto.RacecarData.Steering} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Steering, 11));
};


/**
 * @param {?proto.RacecarData.Steering|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setSteering = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearSteering = function() {
  return this.setSteering(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasSteering = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional BrakePressure brake_pressure = 12;
 * @return {?proto.RacecarData.BrakePressure}
 */
proto.RacecarData.prototype.getBrakePressure = function() {
  return /** @type{?proto.RacecarData.BrakePressure} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.BrakePressure, 12));
};


/**
 * @param {?proto.RacecarData.BrakePressure|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setBrakePressure = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearBrakePressure = function() {
  return this.setBrakePressure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasBrakePressure = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool disconnected = 13;
 * @return {boolean}
 */
proto.RacecarData.prototype.getDisconnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setDisconnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional Planning_Points points = 14;
 * @return {?proto.RacecarData.Planning_Points}
 */
proto.RacecarData.prototype.getPoints = function() {
  return /** @type{?proto.RacecarData.Planning_Points} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Planning_Points, 14));
};


/**
 * @param {?proto.RacecarData.Planning_Points|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setPoints = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearPoints = function() {
  return this.setPoints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasPoints = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 track_flag = 15;
 * @return {number}
 */
proto.RacecarData.prototype.getTrackFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setTrackFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 veh_flag = 16;
 * @return {number}
 */
proto.RacecarData.prototype.getVehFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setVehFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional Location location = 17;
 * @return {?proto.RacecarData.Location}
 */
proto.RacecarData.prototype.getLocation = function() {
  return /** @type{?proto.RacecarData.Location} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Location, 17));
};


/**
 * @param {?proto.RacecarData.Location|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double coolant_temperature = 18;
 * @return {number}
 */
proto.RacecarData.prototype.getCoolantTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setCoolantTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double engine_oil_pressure_kpa = 19;
 * @return {number}
 */
proto.RacecarData.prototype.getEngineOilPressureKpa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setEngineOilPressureKpa = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional int32 lap_count = 20;
 * @return {number}
 */
proto.RacecarData.prototype.getLapCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setLapCount = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional Errors errors = 21;
 * @return {?proto.RacecarData.Errors}
 */
proto.RacecarData.prototype.getErrors = function() {
  return /** @type{?proto.RacecarData.Errors} */ (
    jspb.Message.getWrapperField(this, proto.RacecarData.Errors, 21));
};


/**
 * @param {?proto.RacecarData.Errors|undefined} value
 * @return {!proto.RacecarData} returns this
*/
proto.RacecarData.prototype.setErrors = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.clearErrors = function() {
  return this.setErrors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RacecarData.prototype.hasErrors = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 laps = 22;
 * @return {number}
 */
proto.RacecarData.prototype.getLaps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setLaps = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 raceline_index = 23;
 * @return {number}
 */
proto.RacecarData.prototype.getRacelineIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.RacecarData} returns this
 */
proto.RacecarData.prototype.setRacelineIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


goog.object.extend(exports, proto);
